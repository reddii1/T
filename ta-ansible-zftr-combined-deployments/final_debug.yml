$ErrorActionPreference = "Stop"

# Static Variables
$api_url = "{{ lookup('env','CI_REGISTRY') }}/api/v4/projects/43328313/repository/commits"
$CommitMessage = "backup for nectar {{ lookup('env','nectar_cx_version') }} $(Get-Date -Format 'yyyy-MM-dd') [skip ci]"
$CsvDir = "F:\Nectar\CXA\liferay-ce-portal-{{ lookup('env','liferay_version') }}\test-case-data"
$PrivateToken = "{{ lookup('env','NECTAR_BACKUP_PAT') }}"
$Branch = "test-case-data-{{ lookup('env','ENVIRONMENT') }}"

# Navigate to the CSV directory
try {
    Set-Location -Path $CsvDir -ErrorAction Stop
    Write-Host "Successfully changed to directory: $CsvDir"
} catch {
    Write-Host "Error accessing directory: $_"
    exit 1
}

# Get the list of CSV files in the GitLab repository
$treeUrl = "{{ lookup('env','CI_REGISTRY') }}/api/v4/projects/43328313/repository/tree?ref=$Branch&path=/"
try {
    $repoFiles = Invoke-RestMethod -Uri $treeUrl -Headers @{ "PRIVATE-TOKEN" = $PrivateToken } -Method Get -ErrorAction Stop
    $repoCsvFiles = $repoFiles | Where-Object { $_.type -eq "blob" -and $_.name -like "*.csv" } | ForEach-Object { $_.name }
    Write-Host "GitLab CSV files: $repoCsvFiles"
} catch {
    Write-Host "Error fetching GitLab files: $_"
    exit 1
}

# Get the list of local CSV files
$localCsvFiles = Get-ChildItem -Path . -Filter "*.csv" | ForEach-Object { $_.Name }
Write-Host "Local CSV files: $localCsvFiles"

# Build a list of actions
$actions = @()

# Process each local CSV file to determine "create" or "update" actions
Get-ChildItem -Path . -Filter "*.csv" | ForEach-Object {
    $filePath = $_.Name
    $fileContent = [System.Text.Encoding]::UTF8.GetString([System.IO.File]::ReadAllBytes($_.FullName))
    if ($repoCsvFiles -contains $filePath) {
        $actionType = "update"
        Write-Host "File exists in GitLab. Will update: $filePath"
    } else {
        $actionType = "create"
        Write-Host "File not found in GitLab. Will create: $filePath"
    }
    $actions += @{
        action     = $actionType
        file_path = $filePath
        content    = $fileContent
    }
}

# Identify and add "delete" actions for repo files not present locally
$filesToDelete = $repoCsvFiles | Where-Object { $_ -notin $localCsvFiles }
foreach ($file in $filesToDelete) {
    $actions += @{
        action     = "delete"
        file_path = $file
    }
    Write-Host "File not found locally. Will delete from GitLab: $file"
}

# Build and send the commit request if there are actions
if ($actions.Count -gt 0) {
    $payload = @{
        branch         = $Branch
        commit_message = $CommitMessage
        actions        = $actions
    } | ConvertTo-Json -Depth 10
    Write-Host "Committing payload: $payload"
    try {
        Invoke-RestMethod -Uri $api_url `
            -Headers @{ "PRIVATE-TOKEN" = $PrivateToken } `
            -Method Post `
            -Body $payload `
            -ContentType "application/json" `
            -ErrorAction Stop
        Write-Host "Commit successful"
    } catch {
        Write-Host "API commit failed: $_"
        exit 1
    }
    Write-Host "Backup completed: files created, updated, or deleted on branch: $Branch"
} else {
    Write-Host "No changes to commit."
}
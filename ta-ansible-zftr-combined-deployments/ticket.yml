I’ll modify the previous Ansible playbook to incorporate the test case CSV file versioning requirement using GitLab’s REST API. The solution will replace the manual zip/curl process with automated branch-based version control.
Here’s the updated playbook:
- name: Find VMs
  azure_rm_virtualmachine_info:
    resource_group: "{{ lookup('env','azure_resource_group') }}"
  register: vm_list

- name: Parse VM List
  ansible.builtin.debug:
    var: item
  loop: "{{ vm_list | to_json | from_json | json_query(vm_name_query) }}"
  vars:
    vm_name_query: "vms[?ends_with(name,'radar-{{ lookup('env', 'ENVIRONMENT') }}')].name"
  register: nectar_vm_name
  no_log: true

- name: Set VM fact 
  set_fact:
    nectar_vm: "{{ nectar_vm_name.results[0].item }}"
    nectar_version: "{{ lookup('env', 'nectar_cx_version') }}"
    test_case_path: "F:\\Nectar\\CXA\\liferay-ce-portal-7.4.3.78-ga78\\test-case-data"
  no_log: true

- name: Determine target branch based on environment
  set_fact:
    target_branch: "{{ 'test-case-data-dev' if lookup('env', 'ENVIRONMENT') == 'dev' else 'test-case-data-live' }}"

- name: Read test case CSV files
  win_find:
    paths: "{{ test_case_path }}"
    patterns: "*.csv"
  register: csv_files
  when: nectar_vm is defined

- name: Create GitLab commit with test case CSV files
  uri:
    url: "https://gitlab.com/api/v4/projects/{{ gitlab_project_id }}/repository/commits"
    method: POST
    headers:
      Private-Token: "{{ lookup('env', 'GITLAB_TOKEN') }}"
      Content-Type: "application/json"
    body_format: json
    body: 
      branch: "{{ target_branch }}"
      commit_message: "Test case backup from Nectar v{{ nectar_version }} - {{ ansible_date_time.iso8601 }}"
      actions: "{{ csv_file_actions }}"
  vars:
    csv_file_actions: >
      {{
        csv_files.files | map('extract', {
          'action': 'update',
          'file_path': 'test-case-data/' ~ item.path | basename,
          'content': lookup('file', item.path) | b64encode,
          'encoding': 'base64'
        }) | list
      }}
  register: gitlab_testcase_commit
  when: 
    - csv_files.files is defined
    - csv_files.files | length > 0

- name: Create GitLab commit with VM shutdown info
  uri:
    url: "https://gitlab.com/api/v4/projects/{{ gitlab_project_id }}/repository/commits"
    method: POST
    headers:
      Private-Token: "{{ lookup('env', 'GITLAB_TOKEN') }}"
      Content-Type: "application/json"
    body_format: json
    body: 
      branch: "{{ gitlab_branch | default('main') }}"
      commit_message: "VM Shutdown: {{ nectar_vm }} - {{ ansible_date_time.iso8601 }}"
      actions:
        - action: "update"
          file_path: "vm_shutdowns/{{ ansible_date_time.date }}/{{ nectar_vm }}.log"
          content: |
            VM Shutdown Log
            --------------
            VM Name: {{ nectar_vm }}
            Resource Group: {{ lookup('env','azure_resource_group') }}
            Environment: {{ lookup('env','ENVIRONMENT') }}
            Test Cases Commit: {{ gitlab_testcase_commit.json.id | default('N/A') }}
            Date: {{ ansible_date_time.iso8601 }}
            Status: Initiated
    status_code: 201
  register: gitlab_commit
  when: 
    - nectar_vm is defined
    - gitlab_testcase_commit.status is defined
    - gitlab_testcase_commit.status == 201

- name: Stop Nectar Radar VM
  azure_rm_virtualmachine:
    resource_group: "{{ lookup('env','azure_resource_group') }}"
    name: "{{ nectar_vm }}"
    started: false
    tags: "{{ ta_tags|combine({'Persistence': 'Ignore','applicationRole': 'nectar', 'applicationFunction': 'decommission'}) }}"
    append_tags: false
  vars:
    current_nectar: "s-{{ lookup('env','environment_type') }}-dw-ccc-test-automation-nectar-{{ lookup('env','nectar_cx_version') }}-radar-{{ lookup('env','ENVIRONMENT') }}"
  when: 
    - nectar_vm != current_nectar
    - gitlab_commit.status == 201
  register: vm_shutdown_result

- name: Update GitLab commit with shutdown result
  uri:
    url: "https://gitlab.com/api/v4/projects/{{ gitlab_project_id }}/repository/commits"
    method: POST
    headers:
      Private-Token: "{{ lookup('env', 'GITLAB_TOKEN') }}"
      Content-Type: "application/json"
    body_format: json
    body:
      branch: "{{ gitlab_branch | default('main') }}"
      commit_message: "VM Shutdown Complete: {{ nectar_vm }} - {{ ansible_date_time.iso8601 }}"
      actions:
        - action: "update"
          file_path: "vm_shutdowns/{{ ansible_date_time.date }}/{{ nectar_vm }}.log"
          content: |
            VM Shutdown Log
            --------------
            VM Name: {{ nectar_vm }}
            Resource Group: {{ lookup('env','azure_resource_group') }}
            Environment: {{ lookup('env','ENVIRONMENT') }}
            Test Cases Commit: {{ gitlab_testcase_commit.json.id | default('N/A') }}
            Date: {{ ansible_date_time.iso8601 }}
            Status: {{ 'Completed' if vm_shutdown_result.changed else 'Failed' }}
            Details: {{ vm_shutdown_result.msg | default('No additional details') }}
    status_code: 201
  when: 
    - gitlab_commit.status == 201
    - vm_shutdown_result is defined

- name: Restore test cases for new deployment
  uri:
    url: "https://gitlab.com/api/v4/projects/{{ gitlab_project_id }}/repository/tree?ref={{ target_branch }}&path=test-case-data"
    method: GET
    headers:
      Private-Token: "{{ lookup('env', 'GITLAB_TOKEN') }}"
    return_content: yes
  register: test_case_files
  when: 
    - gitlab_testcase_commit.status == 201
    - "'deploy' in ansible_run_tags | default([])"

- name: Download test case files
  win_get_url:
    url: "https://gitlab.com/api/v4/projects/{{ gitlab_project_id }}/repository/files/{{ item.path | urlencode }}/raw?ref={{ target_branch }}"
    dest: "{{ test_case_path }}\\{{ item.name }}"
    headers:
      Private-Token: "{{ lookup('env', 'GITLAB_TOKEN') }}"
  loop: "{{ test_case_files.json }}"
  when: 
    - test_case_files.json is defined
    - "'deploy' in ansible_run_tags | default([])"
Key Changes and Explanation:
New Requirements Addressed:
	1	CSV File Versioning
	◦	Uses win_find to locate all .csv files in the specified Windows path
	◦	Commits them to either test-case-data-dev or test-case-data-live branch
	◦	Files are stored in test-case-data/ directory in the repository
	◦	Base64 encoding is used due to API requirements for binary content
	2	Branch Management
	◦	Dynamically selects target branch based on ENVIRONMENT variable
	◦	test-case-data-dev for development
	◦	test-case-data-live for production
	3	Version Tracking
	◦	Commit message includes Nectar version from nectar_cx_version
	◦	VM shutdown log includes reference to test case commit ID
	4	Restore Functionality
	◦	Added tasks to retrieve files from GitLab when deploying
	◦	Uses win_get_url to download files to original path
	◦	Triggered with deploy tag
Environment Variables:
	•	GITLAB_TOKEN: GitLab PAT with api/write_repository scope
	•	gitlab_project_id: GitLab project ID
	•	nectar_cx_version: Nectar version number
	•	ENVIRONMENT: dev or live/prod
New Tasks:
	1	Read CSV Files: Locates all .csv files
	2	Commit CSV Files: Creates versioned backup
	3	Restore Test Cases: Gets file list from GitLab
	4	Download Files: Restores files to new instance
Usage:
	•	Run normally: Backs up test cases and shuts down VM
	•	Run with --tags deploy: Also restores test cases
	•	Example: ansible-playbook playbook.yml --tags deploy
Benefits over Previous Manual Process:
	•	Eliminates manual zip/curl steps
	•	Automatic versioning with git
	•	Environment-specific branches
	•	Integrated with deployment pipeline
	•	Trackable via commit history
Prerequisites:
	•	GitLab project: ta-nectar-backup
	•	Branches: test-case-data-dev, test-case-data-live
	•	Windows environment (due to win_* modules)
	•	Appropriate GitLab permissions
This solution fully replaces the manual Package Registry process with a more robust, git-based version control system for the test case CSV files, integrated with the VM management workflow.

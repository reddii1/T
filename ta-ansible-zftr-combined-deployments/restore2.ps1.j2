---
- name: Ensure CSV directory exists
  ansible.windows.win_file:
    path: "{{ csv_dir }}"
    state: directory

- name: Template PowerShell restore script
  ansible.windows.win_template:
    src: restore_csv.ps1.j2
    dest: "{{ csv_dir }}\\restore_csv.ps1"

- name: Execute PowerShell restore script
  ansible.windows.win_shell: |
    powershell.exe -ExecutionPolicy Bypass -File "{{ csv_dir }}\\restore_csv.ps1"
  register: restore_result

- name: Clean up temporary script
  ansible.windows.win_file:
    path: "{{ csv_dir }}\\restore_csv.ps1"
    state: absent

- name: Debug restore result
  ansible.builtin.debug:
    msg: "{{ restore_result.stdout_lines }}"





=============
# Generated by Ansible
$ErrorActionPreference = "Stop"

# Static Variables
$apiUrl = "{{ gitlab_url }}/api/v4/projects/{{ gitlab_project_id }}/repository"
$PrivateToken = "{{ backup_pat }}"
$Branch = "test-case-data-{{ branch }}"
$CsvDir = "{{ csv_dir }}"

# Headers for API calls
$headers = @{
    "PRIVATE-TOKEN" = $PrivateToken
    "Content-Type" = "application/json"
}

try {
    # Navigate to CSV directory
    Set-Location -Path $CsvDir

    # Get list of CSV files from GitLab repository
    $treeUrl = "$apiUrl/tree?ref=$Branch&path=/"
    $repoFiles = Invoke-RestMethod -Uri $treeUrl -Headers $headers -Method Get
    $repoCsvFiles = $repoFiles | Where-Object { $_.type -eq "blob" -and $_.name -like "*.csv" }

    if (-not $repoCsvFiles) {
        Write-Host "No CSV files found in GitLab repository branch: $Branch"
        exit 0
    }

    # Get list of local CSV files
    $localCsvFiles = Get-ChildItem -Path . -Filter "*.csv" -ErrorAction SilentlyContinue | ForEach-Object { $_.Name }

    # Process each CSV file from repository
    foreach ($repoFile in $repoCsvFiles) {
        $fileName = $repoFile.name
        $fileUrl = "$apiUrl/files/$($fileName.Replace('\', '%2F'))/raw?ref=$Branch"
        
        # Download file content
        $fileContent = Invoke-RestMethod -Uri $fileUrl -Headers $headers -Method Get
        
        # Write content to local file
        [System.IO.File]::WriteAllText(
            (Join-Path $CsvDir $fileName),
            $fileContent
        )
        Write-Host "Restored: $fileName"
    }

    # Remove local files not present in repository
    if ($localCsvFiles) {
        $filesToDelete = $localCsvFiles | Where-Object { $_ -notin $repoCsvFiles.name }
        foreach ($file in $filesToDelete) {
            Remove-Item -Path (Join-Path $CsvDir $file) -Force
            Write-Host "Removed local file not in repository: $file"
        }
    }

    Write-Host "Restore completed from branch: $Branch"
}
catch {
    Write-Error "Restore failed: $_"
    exit 1
}

